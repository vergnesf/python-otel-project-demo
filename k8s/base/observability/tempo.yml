apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  labels:
    io.kompose.service: tempo-data
  name: tempo-data
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 100Mi
---
apiVersion: v1
data:
  tempo.yml: |
    server:
      http_listen_port: 3200

    distributor:
      receivers: # this configuration will listen on all ports and protocols that tempo is capable of.
        jaeger: # the receives all come from the OpenTelemetry collector.  more configuration information can
          protocols: # be found there: https://github.com/open-telemetry/opentelemetry-collector/tree/main/receiver
            thrift_http: #
            grpc: # for a production deployment you should only enable the receivers you need!
            thrift_binary:
            thrift_compact:
        zipkin:
        otlp:
          protocols:
            http:
            grpc:
        opencensus:

    ingester:
      trace_idle_period: 10s # the length of time after a trace has not received spans to consider it complete and flush it
      max_block_bytes: 1_000_000 # cut the head block when it hits this size or ...
      max_block_duration: 5m #   this much time passes

    compactor:
      compaction:
        compaction_window: 1h # blocks in this time window will be compacted together
        max_block_bytes: 100_000_000 # maximum size of compacted blocks
        block_retention: 1h
        compacted_block_retention: 10m

    metrics_generator:
      processor:
        service_graphs:
          histogram_buckets: [0.1, 0.2, 0.4, 0.8, 1.6, 3.2, 6.4, 12.8]
          dimensions:
            - job
            - service.name
            - service.namespace
            - service.instance.id
            - host
            - environment
            - net.k8s.name
            - net.peer.name
            - net.host.name
            - http.method
            - http.status_code
            - db.name
            - http.url
            - http.host
            - http.route
            - http.method
            - code.function
            - code.namespace
            - db.operation
            - db.sql.table
            - otel.library.version
        span_metrics:
          histogram_buckets:
            [
              0.002,
              0.004,
              0.008,
              0.016,
              0.032,
              0.064,
              0.128,
              0.256,
              0.512,
              1.02,
              2.05,
              4.10,
            ]
          dimensions:
            - job
            - service.name
            - service.namespace
            - service.instance.id
            - host
            - environment
            - net.k8s.name
            - net.peer.name
            - net.host.name
            - http.method
            - http.status_code
            - db.name
            - http.url
            - http.host
            - http.route
            - http.method
            - code.function
            - code.namespace
            - db.operation
            - db.sql.table
            - otel.library.version
          enable_target_info: false
      storage:
        path: /tmp/tempo/generator
        remote_write:
          - url: "http://mimir:9009/api/v1/push"
            send_exemplars: true

    storage:
      trace:
        backend: local # backend configuration to use
        block:
          bloom_filter_false_positive: .05 # bloom filter false positive rate.  lower values create larger filters but fewer false positives
          v2_index_downsample_bytes: 1000 # number of bytes per index record
          v2_encoding: zstd # block encoding/compression.  options: none, gzip, lz4-64k, lz4-256k, lz4-1M, lz4, snappy, zstd, s2
        wal:
          path: /tmp/tempo/wal # where to store the the wal locally
          v2_encoding: snappy # wal encoding/compression.  options: none, gzip, lz4-64k, lz4-256k, lz4-1M, lz4, snappy, zstd, s2
        local:
          path: /tmp/tempo/blocks
        pool:
          max_workers: 100 # worker pool determines the number of parallel requests to the object store backend
          queue_depth: 10000

    overrides:
      defaults:
        metrics_generator:
          processors:
            - service-graphs
            - span-metrics
kind: ConfigMap
metadata:
  annotations:
    use-subpath: "true"
  labels:
    io.kompose.service: tempo
  name: tempo-cm0
---
apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
    kompose.cmd: /home/fvergnes/.asdf/installs/kompose/1.34.0/bin/kompose -f docker-compose.yml convert
    kompose.version: 1.34.0 (cbf2835db)
  labels:
    io.kompose.service: tempo
  name: tempo
spec:
  replicas: 1
  selector:
    matchLabels:
      io.kompose.service: tempo
  strategy:
    type: Recreate
  template:
    metadata:
      annotations:
        kompose.cmd: /home/fvergnes/.asdf/installs/kompose/1.34.0/bin/kompose -f docker-compose.yml convert
        kompose.version: 1.34.0 (cbf2835db)
      labels:
        io.kompose.service: tempo
    spec:
      containers:
        - args:
            - -config.file=/etc/tempo.yaml
          image: grafana/tempo:2.5.0
          name: tempo
          ports:
            - containerPort: 14268
              protocol: TCP
            - containerPort: 3200
              protocol: TCP
            - containerPort: 4317
              protocol: TCP
            - containerPort: 4318
              protocol: TCP
            - containerPort: 9411
              protocol: TCP
          volumeMounts:
            - mountPath: /etc/tempo.yaml
              name: tempo-cm0
              subPath: tempo.yaml
            - mountPath: /tmp/tempo
              name: tempo-data
      restartPolicy: Always
      volumes:
        - configMap:
            items:
              - key: tempo.yml
                path: tempo.yaml
            name: tempo-cm0
          name: tempo-cm0
        - name: tempo-data
          persistentVolumeClaim:
            claimName: tempo-data
---
apiVersion: v1
kind: Service
metadata:
  annotations:
    kompose.cmd: /home/fvergnes/.asdf/installs/kompose/1.34.0/bin/kompose -f docker-compose.yml convert
    kompose.version: 1.34.0 (cbf2835db)
  labels:
    io.kompose.service: tempo
  name: tempo
spec:
  ports:
    - name: "14268"
      port: 14268
      targetPort: 14268
    - name: "3200"
      port: 3200
      targetPort: 3200
    - name: "4317"
      port: 4317
      targetPort: 4317
    - name: "4318"
      port: 4318
      targetPort: 4318
    - name: "9411"
      port: 9411
      targetPort: 9411
  selector:
    io.kompose.service: tempo
